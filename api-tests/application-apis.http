### Application Management API Tests for MyBaaS
### ============================================
### Application CRUD operations within tenant scope
### Each tenant can manage their own applications
### ============================================

### Create a new application - ecommerce
POST {{baseUrl}}/api/applications
Content-Type: application/json
Authorization: {{authToken}}
Host: {{tenantHost}}

{
  "id": "3853f223-8a11-4c0e-a625-9d44687f5cfc",
  "applicationName": "ecommerce",
  "description": "Main e-commerce application",
  "isActive": true
}

> {% 
client.test("Ecommerce application created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.applicationName === "ecommerce", "Application name should match");
    client.assert(response.body.id !== undefined, "Response should contain application ID");
});
%}

###

### Create another application - analytics
POST {{baseUrl}}/api/applications
Content-Type: application/json
Authorization: {{authToken}}
Host: {{tenantHost}}

{
  "id": "ba8b1d74-1cc6-42f9-8e59-43a46dc5ac9a",
  "applicationName": "analytics",
  "description": "Analytics and reporting application",
  "isActive": true
}

> {% 
client.test("Analytics application created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.applicationName === "analytics", "Application name should match");
    client.assert(response.body.id !== undefined, "Response should contain application ID");
});
%}

###

### Create third application - cms
POST {{baseUrl}}/api/applications
Content-Type: application/json
Authorization: {{authToken}}
Host: {{tenantHost}}

{
  "id": "7d6956ae-2277-4864-a3c0-fa84bee08e90",
  "applicationName": "cms",
  "description": "Content management system",
  "isActive": true
}

> {% 
client.test("CMS application created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.applicationName === "cms", "Application name should match");
    client.assert(response.body.id !== undefined, "Response should contain application ID");
});
%}

###

### Get all applications
GET {{baseUrl}}/api/applications
Authorization: {{authToken}}
Host: {{tenantHost}}

> {% 
client.test("Applications retrieved successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
    client.assert(Array.isArray(response.body) || response.body.content !== undefined, "Response should be an array or have content property");
});
%}

###

### Get application by ID
# Replace {id} with actual application ID from create response
GET {{baseUrl}}/api/apps/3853f223-8a11-4c0e-a625-9d44687f5cfc
Authorization: {{authToken}}
Host: {{tenantHost}}

> {% 
client.test("Application retrieved by ID successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
    client.assert(response.body.id !== undefined, "Response should contain application ID");
    client.assert(response.body.applicationName !== undefined, "Response should contain application name");
});
%}

###

### Update application
# Replace {id} with actual application ID
PATCH {{baseUrl}}/api/apps/3853f223-8a11-4c0e-a625-9d44687f5cfc
Content-Type: application/json
Authorization: {{authToken}}
Host: {{tenantHost}}

{
  "description": "Updated e-commerce application description",
  "isActive": true
}

> {% 
client.test("Application updated successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
    client.assert(response.body.applicationName === "ecommerce", "Application name should not be updated");
    client.assert(response.body.description === "Updated e-commerce application description", "Description should be updated");
});
%}

###

### Update application status to inactive
# Replace {id} with actual application ID
PATCH {{baseUrl}}/api/apps/ba8b1d74-1cc6-42f9-8e59-43a46dc5ac9a
Content-Type: application/json
Authorization: {{authToken}}
Host: {{tenantHost}}

{
  "description": "Analytics and reporting application",
  "isActive": false
}

> {% 
client.test("Application status updated to inactive", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
    client.assert(response.body.isActive === false, "Application should be inactive");
});
%}

###

### Delete application
# Replace {id} with actual application ID
DELETE {{baseUrl}}/api/apps/7d6956ae-2277-4864-a3c0-fa84bee08e90
Authorization: {{authToken}}
Host: {{tenantHost}}

> {% 
client.test("Application deleted successfully", function() {
    client.assert(response.status === 204, "Expected status 204 - No Content");
});
%}

###

### ============================================
### Application Error Testing
### ============================================

### Test creating application with duplicate name
POST {{baseUrl}}/api/applications
Content-Type: application/json
Authorization: {{authToken}}
Host: {{tenantHost}}

{
  "applicationName": "ecommerce",
  "description": "Duplicate application name",
  "isActive": true
}

> {% 
client.test("Duplicate application name rejected", function() {
    client.assert(response.status === 400 || response.status === 409, "Expected status 400/409 - Bad Request/Conflict");
});
%}

###

### Test creating application with invalid name
POST {{baseUrl}}/api/applications
Content-Type: application/json
Authorization: {{authToken}}
Host: {{tenantHost}}

{
  "applicationName": "",
  "description": "Empty application name",
  "isActive": true
}

> {% 
client.test("Empty application name rejected", function() {
    client.assert(response.status === 400, "Expected status 400 - Bad Request");
});
%}

###

### Test getting non-existent application
GET {{baseUrl}}/api/apps/0dc54e81-814e-4439-bb44-ea45049d234c
Authorization: {{authToken}}
Host: {{tenantHost}}

> {% 
client.test("Non-existent application not found", function() {
    client.assert(response.status === 404, "Expected status 404 - Not Found");
});
%}

###