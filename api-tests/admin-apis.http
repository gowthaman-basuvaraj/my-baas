### Admin API Tests for MyBaaS
### ============================================
### Administrative operations requiring admin tokens
### Tenant management, system configuration, etc.
### ============================================

### Create a new tenant
POST {{baseUrl}}/admin/tenants
Content-Type: application/json
Authorization: {{authToken}}

{
  "id": "c6553120-601a-42e7-a4b9-35d4a1050d1c",
  "name": "Acme Corporation",
  "domain": "localhost",
  "isActive": true,
  "allowedIps": ["192.168.1.0/24", "10.0.0.0/8"],
  "config": {
    "jwksUri": "http://localhost:8080/.well-known/openid-configuration"
  }
}

> {% 
client.test("Tenant created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.id !== undefined, "Response should contain tenant ID");
    client.assert(response.body.name === "Acme Corporation", "Name should match");
});
%}

###

### Create another tenant
POST {{baseUrl}}/admin/tenants
Content-Type: application/json
Authorization: {{authToken}}

{
  "id": "97f565ed-d56a-4460-a6e2-28a42ed2976e",
  "name": "Beta Company",
  "domain": "beta.example.com",
  "isActive": true,
  "config": {
    "jwksUri": "http://localhost:8080/.well-known/openid-configuration"
  }
}

> {% 
client.test("Second tenant created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.id !== undefined, "Response should contain tenant ID");
    client.assert(response.body.name === "Beta Company", "Name should match");
});
%}

###

### Create another tenant with JWKS config
POST {{baseUrl}}/admin/tenants
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Theta Company",
  "domain": "theta.example.com",
  "isActive": true,
  "allowedIps": ["127.0.0.1/32", "10.0.0.0/8"],
  "config": {
    "jwksUri": "http://localhost:8080/.well-known/openid-configuration"
  }
}

> {% 
client.test("Tenant with JWKS config created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.id !== undefined, "Response should contain tenant ID");
    client.assert(response.body.config.jwksUri !== undefined, "Config should contain JWKS URI");
});
%}

###

### Get all tenants with pagination
GET {{baseUrl}}/admin/tenants?page=1&pageSize=10
Authorization: {{authToken}}

> {% 
client.test("Tenants retrieved successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
    client.assert(Array.isArray(response.body.list), "Response should be an array");
});
%}

###

### Get tenant by ID
# Replace {id} with actual tenant ID from create response
GET {{baseUrl}}/admin/tenants/c6553120-601a-42e7-a4b9-35d4a1050d1c
Authorization: {{authToken}}

> {% 
client.test("Tenant retrieved by ID successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
    client.assert(response.body.id !== undefined, "Response should contain tenant ID");
    client.assert(response.body.name !== undefined, "Response should contain tenant name");
});
%}

###

### Update tenant
# Replace {id} with actual tenant ID
PUT {{baseUrl}}/admin/tenants/c6553120-601a-42e7-a4b9-35d4a1050d1c
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Acme Corporation Updated",
  "domain": "127.0.0.1",
  "isActive": true,
  "allowedIps": ["192.168.1.0/24", "10.0.0.0/8", "172.16.0.0/12", "127.0.0.1"]
}

> {% 
client.test("Tenant updated successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
    client.assert(response.body.name === "Acme Corporation Updated", "Name should be updated");
    client.assert(response.body.allowedIps.length === 4, "Should have 4 allowed IP ranges");
});
%}

###

### Activate tenant
# Replace {id} with actual tenant ID
POST {{baseUrl}}/admin/tenants/c6553120-601a-42e7-a4b9-35d4a1050d1c/activate
Authorization: {{authToken}}

> {% 
client.test("Tenant activated successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
});
%}

###

### Deactivate tenant
# Replace {id} with actual tenant ID
POST {{baseUrl}}/admin/tenants/c6553120-601a-42e7-a4b9-35d4a1050d1c/deactivate
Authorization: {{authToken}}

> {% 
client.test("Tenant deactivated successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
});
%}

###

### Delete tenant
# Replace {id} with actual tenant ID
DELETE {{baseUrl}}/admin/tenants/97f565ed-d56a-4460-a6e2-28a42ed2976e
Authorization: {{authToken}}

> {% 
client.test("Tenant deleted successfully", function() {
    client.assert(response.status === 204, "Expected status 204 - No Content");
});
%}

###

### ============================================
### Admin Error Testing
### ============================================

### Test unauthorized admin access
GET {{baseUrl}}/admin/tenants
X-Admin-Token: wrong-token

> {% 
client.test("Unauthorized access blocked", function() {
    client.assert(response.status === 401 || response.status === 403, "Expected status 401/403 - Unauthorized/Forbidden");
});
%}

###

### Test creating tenant with invalid data
POST {{baseUrl}}/admin/tenants
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "",
  "domain": "invalid-domain"
}

> {% 
client.test("Invalid tenant data rejected", function() {
    client.assert(response.status === 400, "Expected status 400 - Bad Request");
});
%}

###