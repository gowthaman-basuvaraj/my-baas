### MyBaaS API Testing Suite
### ============================================
### 
### This is the main index file for MyBaaS API tests.
### Individual test files are organized by functionality:
###
### üèóÔ∏è Architecture Overview:
### - Applications: /api/applications (CRUD)
### - Schemas: /api/applications/{applicationName}/schemas (application-scoped)
### - Data: /api/applications/{applicationName}/data/{entityName} (application-scoped)
###
### üîê Multi-tenancy Support:
### - Each tenant has isolated applications, schemas, and data
### - Application names must be unique within a tenant
### - Data tables are prefixed with tenantId and applicationId
###
### üìÅ Test File Organization:
### ============================================

### üë®‚Äçüíº ADMIN API TESTS
### File: ./api-tests/admin-apis.http
### - Tenant CRUD operations
### - Admin-only endpoints
### - System configuration

### üè¢ APPLICATION MANAGEMENT TESTS  
### File: ./api-tests/application-apis.http
### - Application CRUD within tenant scope
### - Multi-application scenarios
### - Application lifecycle management

### üìä SCHEMA MANAGEMENT TESTS
### File: ./api-tests/schema-apis.http  
### - Schema definition and versioning
### - JSON Schema validation
### - Lifecycle scripts and indexing
### - Cross-application schema isolation

### üíæ DATA MANAGEMENT TESTS
### File: ./api-tests/data-apis.http
### - Data CRUD operations
### - Search and filtering
### - Data validation
### - Multi-application data scenarios

### ‚ùå ERROR TESTING
### File: ./api-tests/error-testing-apis.http
### - Authentication and authorization errors
### - Validation errors
### - 404 and other HTTP errors
### - Edge cases and malformed requests

### ============================================
### QUICK START EXAMPLES
### ============================================
### Use these for basic testing workflow:

### 1. Create Tenant (Admin)
POST {{baseUrl}}/admin/tenants
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Test Company",
  "domain": "test.example.com",
  "isActive": true
}

> {% 
client.test("Tenant created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.id !== undefined, "Response should contain tenant ID");
    client.assert(response.body.name === "Test Company", "Name should match");
});
%}

###

### 2. Create Application (Tenant-scoped)
POST {{baseUrl}}/api/applications
Content-Type: application/json
Authorization: {{authToken}}
Host: test.example.com

{
  "applicationName": "test-app",
  "description": "Test application",
  "isActive": true
}

> {% 
client.test("Application created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.applicationName === "test-app", "Application name should match");
    client.assert(response.body.id !== undefined, "Response should contain application ID");
});
%}

###

### 3. Create Schema (Application-scoped)
POST {{baseUrl}}/api/applications/test-app/schemas
Content-Type: application/json
Authorization: {{authToken}}
Host: test.example.com

{
  "entityName": "users",
  "versionName": "v1",
  "jsonSchema": {
    "type": "object",
    "properties": {
      "name": {"type": "string"},
      "email": {"type": "string", "format": "email"}
    },
    "required": ["name", "email"]
  },
  "uniqueIdentifierFormatter": "{email}",
  "isValidationEnabled": true
}

###

### 4. Create Data (Schema-scoped)
POST {{baseUrl}}/api/applications/test-app/data/users/v1
Content-Type: application/json
Authorization: {{authToken}}
Host: test.example.com

{
  "name": "John Doe",
  "email": "john@example.com"
}

> {% 
client.test("User data created successfully", function() {
    client.assert(response.status === 201, "Expected status 201 - Created");
    client.assert(response.body.uniqueIdentifier !== undefined, "Response should contain unique identifier");
});
%}

###

### 5. Query Data
GET {{baseUrl}}/api/applications/test-app/data/users
Authorization: {{authToken}}
Host: test.example.com

> {% 
client.test("Users retrieved successfully", function() {
    client.assert(response.status === 200, "Expected status 200 - OK");
    client.assert(Array.isArray(response.body) || response.body.content !== undefined, "Response should contain user data");
});
%}

###

### ============================================
### RESPONSE HANDLING & TESTING
### ============================================
### Each HTTP request includes response validation:
### - Checks expected HTTP status codes
### - Validates response body structure  
### - Verifies key fields are present
### - Tests business logic expectations
###
### Response Handler Format:
### > {% 
### client.test("Test description", function() {
###     client.assert(response.status === 201, "Expected status 201");
###     client.assert(response.body.id !== undefined, "Should have ID");
### });
### %}
###
### Common Status Code Expectations:
### - 200: Successful GET/PUT operations
### - 201: Successful POST (resource created)
### - 204: Successful DELETE operations
### - 400: Bad Request (validation errors)
### - 401: Unauthorized (missing/invalid auth)
### - 403: Forbidden (insufficient permissions)  
### - 404: Not Found (resource doesn't exist)
### - 409: Conflict (duplicate resource)
###
### ============================================
### CONFIGURATION VARIABLES
### ============================================
### Set these variables in your HTTP client:
###
### @baseUrl = http://localhost:8080
### @authToken = Bearer your-jwt-token
### @tenantHost = your-tenant.example.com
###
### ============================================
### TESTING NOTES
### ============================================
###
### üîÑ Testing Order:
### 1. Start with admin-apis.http (create tenants)
### 2. Use application-apis.http (create applications)
### 3. Use schema-apis.http (define data schemas)
### 4. Use data-apis.http (manage actual data)
### 5. Use error-testing-apis.http (verify error handling)
###
### üéØ Key Features Demonstrated:
### - Multi-tenancy with complete isolation
### - Application-scoped data organization
### - Schema versioning and migration
### - Rich search and filtering capabilities
### - Comprehensive error handling
### - Security and authorization
###
### üìù Response Tracking:
### - Save IDs from create responses for subsequent tests
### - Replace {id} and {uniqueIdentifier} placeholders with actual values
### - Use proper tenant hosts for multi-tenant testing
###
### ============================================