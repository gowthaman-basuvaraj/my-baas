### API Testing File for MyBaaS
### Set base URL and auth token as variables
@baseUrl = http://localhost:7070
@authToken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXIiLCJpYXQiOjE2MTYyMzkwMjJ9.test-token

### ============================================
### SCHEMA APIS
### ============================================

### Create a new schema
POST {{baseUrl}}/api/schema
Content-Type: application/json
Authorization: {{authToken}}

{
  "entityName": "users",
  "versionName": "v1",
  "jsonSchema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "minLength": 1
      },
      "email": {
        "type": "string",
        "format": "email"
      },
      "age": {
        "type": "integer",
        "minimum": 0
      },
      "address": {
        "type": "object",
        "properties": {
          "street": { "type": "string" },
          "city": { "type": "string" },
          "country": { "type": "string" }
        }
      },
      "tags": {
        "type": "array",
        "items": { "type": "string" }
      }
    },
    "required": ["name", "email"]
  },
  "uniqueIdentifierFormatter": "{email}-{timestamp}",
  "indexedJsonPaths": {
    "$.name": true,
    "$.email": true,
    "$.age": true,
    "$.address.city": true,
    "$.tags[*]": true
  },
  "lifecycleScripts": {
    "BEFORE_SAVE": "console.log('Before save: ' + JSON.stringify(data));",
    "AFTER_SAVE": "console.log('After save: ' + uniqueIdentifier);",
    "AFTER_LOAD": "console.log('Data loaded');",
    "BEFORE_DELETE": "console.log('About to delete: ' + uniqueIdentifier);",
    "AFTER_DELETE": "console.log('Deleted: ' + uniqueIdentifier);"
  }
}

###

### Create schema v2 for migration testing
POST {{baseUrl}}/api/schema
Content-Type: application/json
Authorization: {{authToken}}

{
  "entityName": "users",
  "versionName": "v2",
  "jsonSchema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "firstName": {
        "type": "string",
        "minLength": 1
      },
      "lastName": {
        "type": "string",
        "minLength": 1
      },
      "email": {
        "type": "string",
        "format": "email"
      },
      "age": {
        "type": "integer",
        "minimum": 0
      },
      "address": {
        "type": "object",
        "properties": {
          "street": { "type": "string" },
          "city": { "type": "string" },
          "country": { "type": "string" },
          "postalCode": { "type": "string" }
        }
      },
      "tags": {
        "type": "array",
        "items": { "type": "string" }
      }
    },
    "required": ["firstName", "lastName", "email"]
  },
  "uniqueIdentifierFormatter": "{email}-{timestamp}",
  "indexedJsonPaths": {
    "$.firstName": true,
    "$.lastName": true,
    "$.email": true,
    "$.age": true,
    "$.address.city": true,
    "$.address.postalCode": true,
    "$.tags[*]": true
  },
  "lifecycleScripts": {
    "MIGRATE_VERSION": "// Split name into firstName and lastName\nif (oldVersion === 'v1' && newVersion === 'v2') {\n  var nameParts = (data.name || '').split(' ');\n  data.firstName = nameParts[0] || '';\n  data.lastName = nameParts.slice(1).join(' ') || '';\n  delete data.name;\n}\nreturn data;",
    "BEFORE_SAVE": "console.log('Before save v2: ' + JSON.stringify(data));",
    "AFTER_SAVE": "console.log('After save v2: ' + uniqueIdentifier);"
  }
}

###

### Get all schemas
GET {{baseUrl}}/api/schema
Authorization: {{authToken}}

###

### Get schema by ID
# Replace {id} with actual schema ID from create response
GET {{baseUrl}}/api/schema/1
Authorization: {{authToken}}

###

### Update schema
# Replace {id} with actual schema ID
PUT {{baseUrl}}/api/schema/1
Content-Type: application/json
Authorization: {{authToken}}

{
  "entityName": "users",
  "versionName": "v1_updated",
  "jsonSchema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "minLength": 2,
        "maxLength": 100
      },
      "email": {
        "type": "string",
        "format": "email"
      }
    },
    "required": ["name", "email"]
  },
  "uniqueIdentifierFormatter": "{email}",
  "indexedJsonPaths": {
    "$.name": true,
    "$.email": true
  }
}

###

### Delete schema
# Replace {id} with actual schema ID
DELETE {{baseUrl}}/api/schema/1
Authorization: {{authToken}}

###

### ============================================
### SCHEMA VALIDATION APIS
### ============================================

### Get JSON schema for entity and version
GET {{baseUrl}}/api/data/users/v1/schema
Authorization: {{authToken}}

###

### Get JSON schema for v2
GET {{baseUrl}}/api/data/users/v2/schema
Authorization: {{authToken}}

###

### Validate payload against schema - Valid payload
POST {{baseUrl}}/api/data/users/v1/validate
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Test User",
  "email": "test@example.com",
  "age": 25,
  "address": {
    "street": "123 Test St",
    "city": "Test City",
    "country": "Test Country"
  }
}

###

### Validate payload against schema - Invalid payload (missing required field)
POST {{baseUrl}}/api/data/users/v1/validate
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Test User"
}

###

### Validate payload against schema - Invalid payload (wrong type)
POST {{baseUrl}}/api/data/users/v1/validate
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Test User",
  "email": "invalid-email",
  "age": "not-a-number"
}

###

### Validate payload against schema - Invalid payload (minimum value violation)
POST {{baseUrl}}/api/data/users/v1/validate
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "",
  "email": "test@example.com",
  "age": -5
}

###

### Validate against v2 schema
POST {{baseUrl}}/api/data/users/v2/validate
Content-Type: application/json
Authorization: {{authToken}}

{
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "age": 30,
  "address": {
    "street": "123 Main St",
    "city": "New York",
    "country": "USA",
    "postalCode": "10001"
  }
}

###

### ============================================
### DATA MODEL APIS
### ============================================

### Create a data model
POST {{baseUrl}}/api/data/users/v1
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "age": 30,
  "address": {
    "street": "123 Main St",
    "city": "New York",
    "country": "USA"
  },
  "tags": ["developer", "javascript", "backend"]
}

###

### Create another data model for testing
POST {{baseUrl}}/api/data/users/v1
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Jane Smith",
  "email": "jane.smith@example.com",
  "age": 25,
  "address": {
    "street": "456 Oak Ave",
    "city": "San Francisco",
    "country": "USA"
  },
  "tags": ["designer", "ui/ux", "frontend"]
}

###

### Get all data models for an entity
GET {{baseUrl}}/api/data/users
Authorization: {{authToken}}

###

### Get data model by unique identifier
# Replace {uniqueIdentifier} with actual value from create response
GET {{baseUrl}}/api/data/users/john.doe@example.com-1234567890
Authorization: {{authToken}}

###

### Update data model
# Replace {uniqueIdentifier} with actual value
PUT {{baseUrl}}/api/data/users/v1/john.doe@example.com-1234567890
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "John Updated Doe",
  "email": "john.doe@example.com",
  "age": 31,
  "address": {
    "street": "789 New Street",
    "city": "Boston",
    "country": "USA"
  },
  "tags": ["developer", "javascript", "fullstack", "nodejs"]
}

###

### Patch data model (partial update)
# Replace {uniqueIdentifier} with actual value
PATCH {{baseUrl}}/api/data/users/v1/john.doe@example.com-1234567890
Content-Type: application/json
Authorization: {{authToken}}

{
  "age": 32,
  "address": {
    "city": "Chicago"
  },
  "tags": ["developer", "python", "ai"]
}

###

### Search data models - Single filter
POST {{baseUrl}}/api/data/users/search
Content-Type: application/json
Authorization: {{authToken}}

{
  "filters": [
    {
      "jsonPath": "$.age",
      "searchType": "GT",
      "value": 25
    }
  ]
}

###

### Search data models - Multiple filters with EQ
POST {{baseUrl}}/api/data/users/search
Content-Type: application/json
Authorization: {{authToken}}

{
  "filters": [
    {
      "jsonPath": "$.address.city",
      "searchType": "EQ",
      "value": "New York"
    },
    {
      "jsonPath": "$.age",
      "searchType": "GE",
      "value": 30
    }
  ]
}

###

### Search data models - Contains search for arrays
POST {{baseUrl}}/api/data/users/search
Content-Type: application/json
Authorization: {{authToken}}

{
  "filters": [
    {
      "jsonPath": "$.tags[*]",
      "searchType": "HAS",
      "value": "developer"
    }
  ]
}

###

### Search with less than
POST {{baseUrl}}/api/data/users/search
Content-Type: application/json
Authorization: {{authToken}}

{
  "filters": [
    {
      "jsonPath": "$.age",
      "searchType": "LT",
      "value": 30
    }
  ]
}

###

### Search with less than or equal
POST {{baseUrl}}/api/data/users/search
Content-Type: application/json
Authorization: {{authToken}}

{
  "filters": [
    {
      "jsonPath": "$.age",
      "searchType": "LE",
      "value": 30
    }
  ]
}

###

### Migrate data model to v2
# Replace {uniqueIdentifier} with actual value
POST {{baseUrl}}/api/data/users/v1/john.doe@example.com-1234567890/migrate
Content-Type: application/json
Authorization: {{authToken}}

{
  "destinationVersion": "v2"
}

###

### Delete data model
# Replace {uniqueIdentifier} with actual value
DELETE {{baseUrl}}/api/data/users/john.doe@example.com-1234567890
Authorization: {{authToken}}

###

### ============================================
### ERROR TESTING
### ============================================

### Test 404 - Entity not found
GET {{baseUrl}}/api/data/nonexistent
Authorization: {{authToken}}

###

### Test 404 - Version not found
POST {{baseUrl}}/api/data/users/v999
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Test User",
  "email": "test@example.com"
}

###

### Test 400 - Invalid JSON schema
POST {{baseUrl}}/api/data/users/v1
Content-Type: application/json
Authorization: {{authToken}}

{
  "name": "Missing Email"
}

###

### Test 404 - Data model not found
GET {{baseUrl}}/api/data/users/nonexistent-id
Authorization: {{authToken}}

###

### Test migration to non-existent version
POST {{baseUrl}}/api/data/users/v1/john.doe@example.com-1234567890/migrate
Content-Type: application/json
Authorization: {{authToken}}

{
  "destinationVersion": "v999"
}

###